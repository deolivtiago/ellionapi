name: ci

on:
  push:
    branches-ignore: [main]

permissions:
  contents: read

jobs:
  build:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test

    services:
      postgres:
        image: postgres:latest
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup elixir
        uses: erlef/setup-beam@v1
        id: beam
        with:
          elixir-version: "1.15"
          otp-version: "26.0"

      - name: Get cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: >-
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-${{ hashFiles('**/mix.lock') }}
      - name: Get dependencies
        run: mix do deps.get, deps.compile

      - name: Check unused deps
        run: mix deps.unlock --check-unused

      - name: Compile code
        run: mix compile --warnings-as-errors

      - name: Check formatting
        run: mix format --check-formatted

      - name: Analyze code
        run: mix credo --strict

      - name: Setup database
        run: mix setup

      - name: Run tests
        run: mix test

      - name: Run coveralls
        run: mix coveralls.github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  analyze:
    needs: build
    name: Analyze type specs
    runs-on: ubuntu-latest
    env:
      MIX_ENV: dev

    steps:
      - uses: actions/checkout@v3
      - name: Set up Elixir
        id: beam
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.15"
          otp-version: "26.0"

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v3
        id: plt_cache
        with:
          key: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          restore-keys: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            deps
            _build
            priv/plts
      - name: Get dependencies
        run: mix do deps.get, deps.compile

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
      # so we separate the cache restore and save steps in case running dialyzer fails.
      - name: Save PLT cache
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
          key: |
            ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
            deps
            _build
            priv/plts
      - name: Run dialyzer
        run: mix dialyzer --format github
